  /// \file DetectorConstruction.cc
/*
 *
 * DetectorConstruction.cc source template automatically generated by a class generator
 * Creation date : mar. juil. 8 2014
 *
 * This file is part of TpcSDHCALSim libraries.
 * 
 * TpcSDHCALSim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * TpcSDHCALSim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TpcSDHCALSim.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi
 * @copyright CNRS , IPNL
 */


#include "DetectorConstruction.h"

#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4VisAttributes.hh"
#include "G4Box.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
#include "globals.hh"
#include "G4TransportationManager.hh"
#include "G4FieldManager.hh"
#include "G4UniformMagField.hh"

namespace tpc_sdhcal
{

DetectorConstruction::DetectorConstruction() :
		m_targetThickness(5*cm),
		m_distanceToCalorimeter(1*m),
		m_bField(0, 3*tesla, 0)
{

}


DetectorConstruction::~DetectorConstruction() 
{

}


G4VPhysicalVolume *DetectorConstruction::Construct()
{
 // material definitions
 G4NistManager *pNistManager = G4NistManager::Instance();

 // G4Material *pVacuumMaterial   = pNistManager->FindOrBuildMaterial("G4_Galactic");
 G4Material *pAirMaterial      = pNistManager->FindOrBuildMaterial("G4_AIR");
 G4Material *pTungstenMaterial = pNistManager->FindOrBuildMaterial("G4_W");
 G4Material *pIronMaterial     = pNistManager->FindOrBuildMaterial("G4_Fe");

 // dimensions
 G4double worldSize = 100*m;
 G4double targetTransverseSize = 10*cm;
 G4double setupTransverseSize = 1*m;
 G4double calorimeterFrontFaceThickness = 2*mm;

 // placement variables
 G4double targetPositionZ = m_targetThickness/2;
 G4double magneticFieldVolumePositionZ = targetPositionZ + m_targetThickness/2 + m_distanceToCalorimeter/2;
 G4double calorimeterFrontFacePositionZ = magneticFieldVolumePositionZ + m_distanceToCalorimeter/2 + calorimeterFrontFaceThickness/2;


 // World volume
 G4Box *pWorldBox = new G4Box("WorldBox", worldSize/2, worldSize/2, worldSize/2);
 G4LogicalVolume *pWorldVolume = new G4LogicalVolume(pWorldBox, pAirMaterial, "WorldVolume");

 G4VPhysicalVolume* pWorldPlacement = new G4PVPlacement(0,
																																																								G4ThreeVector(),
																																																								pWorldVolume,
																																																								"World",
																																																								0,
																																																								false,
																																																								0,
																																																								true);

 // Target volume
 G4Box *pTargetBox = new G4Box("TargetBox", targetTransverseSize/2, targetTransverseSize/2, m_targetThickness/2);
 G4LogicalVolume *pTargetVolume = new G4LogicalVolume(pTargetBox, pTungstenMaterial, "TargetVolume");

 G4VPhysicalVolume* pTargetPlacement = new G4PVPlacement(0,
																																																									G4ThreeVector(0, 0, targetPositionZ),
																																																									pTargetVolume,
																																																									"Target",
																																																									pWorldVolume,
																																																									false,
																																																									0,
																																																									true);

 // Magnetic field region
 G4Box *pMagneticFieldBox = new G4Box("MagneticFieldBox", worldSize/2, worldSize/2, m_distanceToCalorimeter/2);
 G4LogicalVolume *pMagneticFieldVolume = new G4LogicalVolume(pMagneticFieldBox, pAirMaterial, "MagneticFieldVolume");

 G4VPhysicalVolume* pMagneticFieldPlacement = new G4PVPlacement(0,
																																																																G4ThreeVector(0, 0, magneticFieldVolumePositionZ),
																																																																pMagneticFieldVolume,
																																																																"MagneticFieldRegion",
																																																																pWorldVolume,
																																																																false,
																																																																0,
																																																																true);

	// setup magnetic field in the magnetic field volume only
 G4MagneticField *pMagneticField = new G4UniformMagField(m_bField);
 G4FieldManager *pFieldManager = new G4FieldManager();
 pFieldManager->SetDetectorField(pMagneticField);
 pFieldManager->CreateChordFinder(pMagneticField);

 pMagneticFieldVolume->SetFieldManager(pFieldManager, true);

 // Calorimeter front face
 G4Box *pCalorimeterFrontFaceBox = new G4Box("CalorimeterFrontFaceBox", setupTransverseSize/2, setupTransverseSize/2, calorimeterFrontFaceThickness/2);
 G4LogicalVolume *pCalorimeterFrontFaceVolume = new G4LogicalVolume(pCalorimeterFrontFaceBox, pIronMaterial, "CalorimeterFrontFaceVolume");

 G4VPhysicalVolume* pCalorimeterFrontFacePlacement = new G4PVPlacement(0,
																																																																							G4ThreeVector(0, 0, calorimeterFrontFacePositionZ),
																																																																							pCalorimeterFrontFaceVolume,
																																																																							"CalorimeterFrontFace",
																																																																							pWorldVolume,
																																																																							false,
																																																																							0,
																																																																							true);


 // vis attributes
 pWorldVolume->SetVisAttributes(G4VisAttributes::Invisible);
 pMagneticFieldVolume->SetVisAttributes(G4VisAttributes::Invisible);

	return pWorldPlacement;
}


} 

