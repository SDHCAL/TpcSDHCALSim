  /// \file TrackingAction.cc
/*
 *
 * TrackingAction.cc source template automatically generated by a class generator
 * Creation date : mar. juil. 8 2014
 *
 * This file is part of TpcSDHCALSim libraries.
 * 
 * TpcSDHCALSim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * TpcSDHCALSim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TpcSDHCALSim.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi
 * @copyright CNRS , IPNL
 */


#include "TrackingAction.h"

// geant4
#include "G4Track.hh"

// std
#include <iostream>

namespace tpc_sdhcal
{

TrackingAction::TrackingAction()
{
	/* nop */
}

//------------------------------------------------------------------------------------------------------------------------------------------

TrackingAction::~TrackingAction() 
{
	/* nop */
}

//------------------------------------------------------------------------------------------------------------------------------------------

void TrackingAction::PreUserTrackingAction(const G4Track *pTrack)
{

}

//------------------------------------------------------------------------------------------------------------------------------------------

void TrackingAction::PostUserTrackingAction(const G4Track *pTrack)
{
//	const G4double kineticEnergyAtVertex = pTrack->GetVertexKineticEnergy();
//	const G4String particleName = pTrack->GetDefinition()->GetParticleName();
//	const G4double emKineticEnergyCut = 1; // in GeV
//	const G4double hadKineticEnergyCut = 0.2;  // in GeV
//
//	if(particleName.find("nu") != std::string::npos)
//		return;
//
//		if("gamma" == particleName || "e-" == particleName || "e+" == particleName)
//			return;
//
//	// em particle
//	if("gamma" == particleName || "e-" == particleName || "e+" == particleName)
//	{
//	 if(kineticEnergyAtVertex/GeV < emKineticEnergyCut)
//	 	return;
//	}
//	// hadrons
//	else
//	{
//	 if(kineticEnergyAtVertex/GeV < hadKineticEnergyCut)
//	 	return;
//	}

//	std::cout << pTrack->GetDefinition()->GetParticleName() << " particle produced and passed the cut" << std::endl;
//	std::cout << "  Track ID : " << pTrack->GetTrackID() << std::endl;
//	std::cout << "  PDG ID : " << pTrack->GetDefinition()->GetPDGEncoding() << std::endl;
//	std::cout << "  Vertex position : " << pTrack->GetVertexPosition() << std::endl;
//	std::cout << "  Logical vol at vertex : " << pTrack->GetLogicalVolumeAtVertex()->GetName() << std::endl;
//	std::cout << "  Kinetic energy at vertex : " << pTrack->GetVertexKineticEnergy()/GeV << " GeV" << std::endl;
}


} 

