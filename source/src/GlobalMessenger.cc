  /// \file GlobalMessenger.cc
/*
 *
 * GlobalMessenger.cc source template automatically generated by a class generator
 * Creation date : mar. juil. 8 2014
 *
 * This file is part of TpcSDHCALSim libraries.
 * 
 * TpcSDHCALSim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * TpcSDHCALSim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TpcSDHCALSim.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "GlobalMessenger.h"

#include "RootFileManager.h"
#include "DetectorConstruction.h"

#include "G4UIcommand.hh"
#include "G4UIcmdWithADoubleAndUnit.hh"
#include "G4UIcmdWith3VectorAndUnit.hh"
#include "G4UIcmdWithAString.hh"

namespace tpc_sdhcal
{

GlobalMessenger::GlobalMessenger()
{
 m_pTargetThicknessCmd = new G4UIcmdWithADoubleAndUnit("/TpcSDHCALSim/targetThickness", this);
 m_pTargetThicknessCmd->SetGuidance("Set the thickness of the target");
 m_pTargetThicknessCmd->SetParameterName("value", true);
 m_pTargetThicknessCmd->SetDefaultValue(5);
 m_pTargetThicknessCmd->SetDefaultUnit("cm");
 m_pTargetThicknessCmd->AvailableForStates(G4State_PreInit);

 m_pDistanceToCalorimeterCmd = new G4UIcmdWithADoubleAndUnit("/TpcSDHCALSim/distanceToCalorimeter", this);
 m_pDistanceToCalorimeterCmd->SetGuidance("Set the distance between the target and the calorimeter front face");
 m_pDistanceToCalorimeterCmd->SetParameterName("value", true);
 m_pDistanceToCalorimeterCmd->SetDefaultValue(1);
 m_pDistanceToCalorimeterCmd->SetDefaultUnit("m");
 m_pDistanceToCalorimeterCmd->AvailableForStates(G4State_PreInit);

 m_pBFieldCmd = new G4UIcmdWith3VectorAndUnit("/TpcSDHCALSim/BField", this);
 m_pBFieldCmd->SetGuidance("Set the B field between the target and the calorimeter");
 m_pBFieldCmd->SetParameterName("BFieldX", "BFieldY", "BFieldZ", true);
 m_pBFieldCmd->SetDefaultValue(G4ThreeVector(0.f, 3.f, 0.f));
 m_pBFieldCmd->SetUnitCandidates("tesla");
 m_pBFieldCmd->SetDefaultUnit("tesla");
 m_pBFieldCmd->AvailableForStates(G4State_PreInit);

 m_pRootFileNameCmd = new G4UIcmdWithAString("/TpcSDHCALSim/rootOutputFile", this);
 m_pRootFileNameCmd->SetGuidance("Set the root output file");
 m_pRootFileNameCmd->SetParameterName("value", false);
 m_pRootFileNameCmd->SetDefaultValue("TpcSDHCALSimOutput.root");
 m_pRootFileNameCmd->AvailableForStates(G4State_PreInit);
}

//------------------------------------------------------------------------------------------------------------------------------------------

GlobalMessenger::~GlobalMessenger() 
{
 delete m_pTargetThicknessCmd;
 delete m_pDistanceToCalorimeterCmd;
 delete m_pBFieldCmd;
 delete m_pRootFileNameCmd;
}

//------------------------------------------------------------------------------------------------------------------------------------------

G4String GlobalMessenger::GetCurrentValue(G4UIcommand *pCommand)
{
	if(pCommand == m_pTargetThicknessCmd)
	{
		return m_pTargetThicknessCmd->ConvertToStringWithDefaultUnit(m_pDetectorConstruction->GetTargetThickness());
	}
	else if(pCommand == m_pDistanceToCalorimeterCmd)
	{
		return m_pDistanceToCalorimeterCmd->ConvertToStringWithDefaultUnit(m_pDetectorConstruction->GetDistanceToCalorimeter());
	}
	else if(pCommand == m_pBFieldCmd)
	{
		return m_pBFieldCmd->ConvertToStringWithDefaultUnit(m_pDetectorConstruction->GetBField());
	}
	else if(pCommand == m_pRootFileNameCmd)
	{
		return RootFileManager::GetInstance()->GetRootFileName();
	}
	else
	{
		return "";
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------

void GlobalMessenger::SetNewValue(G4UIcommand *pCommand, G4String newValue)
{
	if(pCommand == m_pTargetThicknessCmd)
	{
		if(NULL != m_pDetectorConstruction)
		 m_pDetectorConstruction->SetTargetThickness(G4UIcmdWithADoubleAndUnit::GetNewDoubleValue(newValue));

		return;
	}
	else if(pCommand == m_pDistanceToCalorimeterCmd)
	{
		if(NULL != m_pDetectorConstruction)
		 m_pDetectorConstruction->SetDistanceToCalorimeter(G4UIcmdWithADoubleAndUnit::GetNewDoubleValue(newValue));

		return;
	}
	else if(pCommand == m_pBFieldCmd)
	{
		if(NULL != m_pDetectorConstruction)
		 m_pDetectorConstruction->SetBField(G4UIcmdWith3VectorAndUnit::GetNew3VectorValue(newValue));

		return;
	}
	else if(pCommand == m_pRootFileNameCmd)
	{
		RootFileManager::GetInstance()->Clear();
		RootFileManager::GetInstance()->OpenFile(newValue);

		return;
	}
}


} 

