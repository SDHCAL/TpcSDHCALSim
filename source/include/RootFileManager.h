  /// \file RootFileManager.h
/*
 *
 * RootFileManager.h header template automatically generated by a class generator
 * Creation date : mer. juil. 9 2014
 *
 * This file is part of TpcSDHCALSim libraries.
 * 
 * TpcSDHCALSim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * TpcSDHCALSim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TpcSDHCALSim.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef ROOTFILEMANAGER_H
#define ROOTFILEMANAGER_H

#include "TTreeWrapper.h"

#include "G4String.hh"

class TFile;

namespace tpc_sdhcal
{

/** 
 * @brief RootFileManager class
 */ 
class RootFileManager 
{
public:

	// singleton interface
	static RootFileManager *GetInstance();
	static void Kill();

	// methods
	bool OpenFile(const G4String &fileName);
	bool IsFileOpened() const;
	const G4String &GetRootFileName() const;
	bool Write();
	template <typename T>
	bool Set(const G4String &treeName, const G4String &branchName, T value);
	bool Fill(const G4String &treeName);
	bool Print(const G4String &treeName);
	bool Scan(const G4String &treeName);
	TTree *GetTree(const G4String &treeName);
	void Clear();

protected:

 RootFileManager();
 virtual ~RootFileManager();

 static RootFileManager   *m_pInstance;

 G4String           m_rootFileName;
 TFile             *m_pRootFile;
 TTreeWrapper      *m_pTTreeWrapper;
};

//------------------------------------------------------------------------------------------------------------------------------------------

template <typename T>
bool RootFileManager::Set(const G4String &treeName, const G4String &branchName, T value)
{
	return m_pTTreeWrapper->Set<T>(treeName, branchName, value);
}

//------------------------------------------------------------------------------------------------------------------------------------------

inline const G4String &RootFileManager::GetRootFileName() const
{
	return m_rootFileName;
}

} 

#endif  //  ROOTFILEMANAGER_H
