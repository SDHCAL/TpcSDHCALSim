  /// \file SteppingAction.h
/*
 *
 * SteppingAction.h header template automatically generated by a class generator
 * Creation date : mer. juil. 9 2014
 *
 * This file is part of TpcSDHCALSim libraries.
 * 
 * TpcSDHCALSim is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * TpcSDHCALSim is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with TpcSDHCALSim.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef STEPPINGACTION_H
#define STEPPINGACTION_H

#include "G4UserSteppingAction.hh"
#include "globals.hh"

#include <vector>

class G4Track;

namespace tpc_sdhcal
{

/** 
 * @brief SteppingAction class
 */ 
class SteppingAction : public G4UserSteppingAction 
{
public:

 SteppingAction();
 virtual ~SteppingAction();

 // from G4UserSteppingAction
 void UserSteppingAction(const G4Step *pStep);

 // additional methods
 void Clear();
 void BeginOfEvent();
 void EndOfEvent();

 void ExtractCalorimeterFrontFaceInfo(const G4Step *pStep);
 void ExtractTPCInfo(const G4Step *pStep);

 bool DoesStepPassesCuts(const G4Step *pStep, bool usePreStep);

protected:

 // tools
 std::vector<G4Track *>     m_calorimeterFrontFaceTrackList;
 std::vector<G4Track *>     m_tpcTrackList;
 G4String                   m_calorimeterFrontFaceVolumeName;
 G4String                   m_targetVolumeName;
 G4String                   m_magneticFieldVolumeName;

 G4String                   m_rootTreeName;

 // cuts
 G4double           m_muMomentumCut;
 G4double           m_emMomentumCut;
 G4double           m_neutronMomentumCut;
 G4double           m_hadronsAndNucleusMomentumCut;
 G4double           m_tpcEnteringMomentumCut;
 G4double           m_calorimeterFrontBorderLimit;

 // root file variables
 int                    m_nConsideredParticles;

 std::vector<double>    m_enteringPointAtCaloX;
 std::vector<double>    m_enteringPointAtCaloY;
 std::vector<int>       m_particleChargeAtCalo;
 std::vector<double>    m_particleMomentumAtCaloX;
 std::vector<double>    m_particleMomentumAtCaloY;
 std::vector<double>    m_particleMomentumAtCaloZ;
 std::vector<double>    m_particleMomentumAtCalo;
 std::vector<int>       m_particleTrackIDAtCalo;
 double                 m_highestMomentumAtCalo;
 double                 m_minimumDistanceBetweenParticlesAtCalo;
 double                 m_totalEventMomentumAtCalo;
 double                 m_meanDistanceBetweenParticlesAtCalo;
 int                    m_nParticlesAtCalo;
 int                    m_nNeutralParticlesAtCalo;
 int                    m_nChargedParticlesAtCalo;

 int                    m_nChargedParticleInTpc;
 int                    m_nNonEntringChargedParticleInTpc;
 int                    m_nParticlesAtCaloInEdges;


}; 

} 

#endif  //  STEPPINGACTION_H
